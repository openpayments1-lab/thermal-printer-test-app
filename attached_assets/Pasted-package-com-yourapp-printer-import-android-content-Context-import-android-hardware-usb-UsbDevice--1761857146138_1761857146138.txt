package com.yourapp.printer;

import android.content.Context;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentFilter;
import android.widget.Toast;
import com.getcapacitor.Plugin;
import com.getcapacitor.annotation.CapacitorPlugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.JSObject;
import com.printer.sdk.PrinterInstance;
import com.printer.sdk.constant.PrinterConstants;

import java.util.HashMap;
import java.util.Iterator;

@CapacitorPlugin(name = "PrinterPlugin")
public class PrinterPlugin extends Plugin {

    private static final String ACTION_USB_PERMISSION = "com.yourapp.USB_PERMISSION";
    private PrinterInstance mPrinter;
    private UsbManager usbManager;
    private UsbDevice usbDevice;

    @PluginMethod
    public void print(PluginCall call) {
        String text = call.getString("text", "Test Print");
        Context context = getContext();
        usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);

        detectUsbPrinter();
        if (usbDevice == null) {
            call.reject("No USB printer detected");
            return;
        }

        if (!usbManager.hasPermission(usbDevice)) {
            PendingIntent permissionIntent = PendingIntent.getBroadcast(context, 0,
                new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);
            usbManager.requestPermission(usbDevice, permissionIntent);
            call.reject("Awaiting USB permission");
            return;
        }

        try {
            mPrinter = PrinterInstance.getPrinterInstance(context, usbDevice, null);
            boolean connected = mPrinter.openConnection();
            if (connected) {
                mPrinter.initPrinter();
                mPrinter.printText("=== Capacitor Test ===\n" + text + "\n");
                mPrinter.setPrinter(PrinterConstants.Command.PRINT_AND_WAKE_PAPER_BY_LINE, 2);
                mPrinter.closeConnection();
                JSObject ret = new JSObject();
                ret.put("success", true);
                call.resolve(ret);
            } else {
                call.reject("Failed to connect to printer");
            }
        } catch (Exception e) {
            call.reject("Error: " + e.getMessage());
        }
    }

    private void detectUsbPrinter() {
        HashMap<String, UsbDevice> deviceList = usbManager.getDeviceList();
        Iterator<UsbDevice> deviceIterator = deviceList.values().iterator();
        while (deviceIterator.hasNext()) {
            UsbDevice device = deviceIterator.next();
            if (device.getVendorId() != 0 && device.getProductId() != 0) {
                usbDevice = device;
                break;
            }
        }
    }
}