Full Example: USB Printer Auto-Detect + Permission Prompt
package com.yourapp;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbManager;
import android.os.Bundle;
import android.os.Handler;
import android.widget.Toast;

import com.printer.sdk.PrinterInstance;
import com.printer.sdk.constant.PrinterConstants;

import java.util.HashMap;
import java.util.Iterator;

public class MainActivity extends Activity {

    private static final String ACTION_USB_PERMISSION = "com.yourapp.USB_PERMISSION";
    private UsbManager usbManager;
    private UsbDevice usbDevice;
    private PrinterInstance mPrinter;

    private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (ACTION_USB_PERMISSION.equals(action)) {
                synchronized (this) {
                    UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
                    if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
                        if (device != null) {
                            usbDevice = device;
                            connectToPrinter();
                        }
                    } else {
                        Toast.makeText(context, "USB permission denied", Toast.LENGTH_SHORT).show();
                    }
                }
            } else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {
                Toast.makeText(context, "USB printer detached", Toast.LENGTH_SHORT).show();
                if (mPrinter != null) {
                    mPrinter.closeConnection();
                    mPrinter = null;
                }
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        usbManager = (UsbManager) getSystemService(Context.USB_SERVICE);

        // Register broadcast receivers
        IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
        filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
        registerReceiver(usbReceiver, filter);

        detectUsbPrinter();
    }

    private void detectUsbPrinter() {
        HashMap<String, UsbDevice> deviceList = usbManager.getDeviceList();
        Iterator<UsbDevice> deviceIterator = deviceList.values().iterator();

        while (deviceIterator.hasNext()) {
            UsbDevice device = deviceIterator.next();

            // Replace with your printer vendor/product IDs if known
            if (device.getVendorId() != 0 && device.getProductId() != 0) {
                usbDevice = device;
                break;
            }
        }

        if (usbDevice == null) {
            Toast.makeText(this, "No USB printer detected", Toast.LENGTH_LONG).show();
            return;
        }

        if (!usbManager.hasPermission(usbDevice)) {
            PendingIntent permissionIntent = PendingIntent.getBroadcast(
                    this, 0, new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);
            usbManager.requestPermission(usbDevice, permissionIntent);
        } else {
            connectToPrinter();
        }
    }

    private void connectToPrinter() {
        new Thread(() -> {
            try {
                mPrinter = PrinterInstance.getPrinterInstance(MainActivity.this, usbDevice, mHandler);
                boolean connected = mPrinter.openConnection();

                runOnUiThread(() ->
                        Toast.makeText(this, connected ? "USB Printer Connected" : "Connection Failed", Toast.LENGTH_SHORT).show()
                );

                if (connected) {
                    testPrint();
                }

            } catch (Exception e) {
                runOnUiThread(() ->
                        Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_LONG).show()
                );
            }
        }).start();
    }

    private final Handler mHandler = new Handler(msg -> {
        switch (msg.what) {
            case PrinterConstants.Connect.SUCCESS:
                Toast.makeText(this, "Printer Connected", Toast.LENGTH_SHORT).show();
                break;
            case PrinterConstants.Connect.FAILED:
                Toast.makeText(this, "Printer Connection Failed", Toast.LENGTH_SHORT).show();
                break;
            case PrinterConstants.Connect.CLOSED:
                Toast.makeText(this, "Printer Disconnected", Toast.LENGTH_SHORT).show();
                break;
        }
        return true;
    });

    private void testPrint() {
        try {
            mPrinter.initPrinter();
            mPrinter.setPrinter(PrinterConstants.Command.ALIGN, PrinterConstants.Command.ALIGN_CENTER);
            mPrinter.printText("=== USB Printer Test ===\n");
            mPrinter.printText("Connection Successful!\n\n");
            mPrinter.setPrinter(PrinterConstants.Command.PRINT_AND_WAKE_PAPER_BY_LINE, 3);
            mPrinter.closeConnection();
        } catch (Exception e) {
            runOnUiThread(() ->
                    Toast.makeText(this, "Print Error: " + e.getMessage(), Toast.LENGTH_LONG).show()
            );
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(usbReceiver);
        if (mPrinter != null) {
            mPrinter.closeConnection();
        }
    }
}

üßæ AndroidManifest.xml

Add these inside <manifest>:

<uses-feature android:name="android.hardware.usb.host" />
<uses-permission android:name="android.permission.USB_PERMISSION" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />


Then inside <application>:

<application ...>
    <activity android:name=".MainActivity">
        <intent-filter>
            <action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" />
        </intent-filter>
        <meta-data
            android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
            android:resource="@xml/device_filter" />
    </activity>
</application>

Create res/xml/device_filter.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <usb-device vendor-id="1155" product-id="22304" /> <!-- Replace with your printer's IDs -->
</resources>

‚úÖ Behavior Summary
Event	Behavior
Printer plugged in	Triggers USB permission popup
User grants permission	Auto-connects & prints test receipt
Printer disconnected	Shows ‚ÄúUSB printer detached‚Äù and closes connection
App restart	Re-detects and re-connects if permission persists
üß™ Quick Test Steps

Plug in the USB printer.

Launch your rebuilt app.

Grant permission when prompted.

You should see:
‚ÄúUSB Printer Connected‚Äù ‚Üí then ‚Äú=== USB Printer Test ===‚Äù printed.